[core]
	editor = nvim
	excludesfile = ~/.gitignore
	quotepath = false
[user]
	name = Matt Venables
	email = matt@venabl.es
[color]
	ui = true
[alias]
	a = add
	b = branch
	brad = branch -D
	c = commit
	ca = commit --all
	co = checkout
	cob = checkout -b
	d = diff
	fap = fetch --all --prune
	fop = fetch origin --prune
	l = log --graph --decorate --pretty=oneline --abbrev-commit
	la = log --graph --decorate --pretty=oneline --abbrev-commit --all
	ll = !git --no-pager l
	lla = !git --no-pager la
	p = push
	pr = pull-request
	pom = push origin main
	s = status
	su = submodule update --init
	ru = remote update
	ro = rebase origin/main
	r = rebase
	# get the latest `main` branch in sync
	sync = "!f() { BRANCH=${1:-main}; git checkout $BRANCH && git fetch --all --prune && git pull; }; f"
	# Clean branches, including squash-and-merged
	# From https://github.com/not-an-aardvark/git-delete-squashed
	cleanup = "!f() { local targetBranch=${1:-main} && git checkout -q $targetBranch && git branch --merged | grep -v \"\\*\" | xargs -n 1 git branch -d && git for-each-ref refs/heads/ \"--format=%(refname:short)\" | while read branch; do mergeBase=$(git merge-base $targetBranch $branch) && [[ $(git cherry $targetBranch $(git commit-tree $(git rev-parse $branch^{tree}) -p $mergeBase -m _)) == \"-\"* ]] && git branch -D $branch; done; }; f"
	claude = "!f() { msg=$(claude -p \"Look at the staged git changes and create a summarizing git commit title. Only respond with the title and no affirmation.\"); git commit -m \"$msg\"; }; f"
[merge]
	conflictstyle = zdiff3
[credential]
	helper = osxkeychain
[commit]
	gpgsign = true
[init]
	defaultBranch = main
[include]
	path = ~/.gitconfig-local
[includeIf "gitdir:~/dev/catena/"]
	path = ~/.gitconfig-catena
[gpg]
	program = /opt/homebrew/bin/gpg
